Authentication and authorization in imageSTORE
==============================================

imageSTORE allows user accounts to be created. Users can then be
assigned read/write or read-only permissions on a per-session basis.

Creating and managing accounts
------------------------------

Let's create a new store::

  >>> from imagestore.app import ImageStore
  >>> store = ImageStore()
  >>> root_container = getRootFolder()
  >>> root_container['store'] = store

Let's look at the XML of the whole store::

  >>> app_url = 'http://localhost/store'
  >>> response = http_get(app_url)
  >>> app_el = el = pretty(response)
  <imagestore xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href="." name="store">
    <accounts href="accounts"/>
    <permissions href="permissions">
      <permission href="permissions/default" name="default" permission="write"/>
    </permissions>
    <sessions href="sessions"/>
  </imagestore>
 
We see two elements that are relevant to authentication and
authorization, ``accounts`` and ``permissions``.

The ``accounts`` URL allows us to define new user accounts::

  >>> accounts_url = url_to(app_url, el, 'ids:accounts/@href')
  >>> accounts_url
  'http://localhost/store/accounts'

We also will create a URL to the sessions for later use::

  >>> sessions_url = url_to(app_url, el, 'ids:sessions/@href')

And a URL to the global permissions::

  >>> permissions_url = url_to(app_url, el, 'ids:permissions/@href')
  
Let's create a new account for user ``foo``::

  >>> account_xml = '''
  ...   <account xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" name="foo">
  ...     <password>baz</password>
  ...   </account>
  ... '''
  >>> response = http_post(accounts_url, account_xml)

The new account is now visible::

  >>> response = http_get(accounts_url)
  >>> el = pretty(response)
  <accounts xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <account href="foo" name="foo">
      <password/>
    </account>
  </accounts>

Note that the password is not visible; it can only be changed.

Let's zoom in on the actual account::

  >>> account_url = url_to(accounts_url, el, 'ids:account[@name="foo"]/@href')
  >>> response = http_get(account_url)
  >>> el = pretty(response)
  <account xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href="." name="foo">
    <password/>
  </account>

We can change the password from ``baz`` to ``bar``::

  >>> xml = '''
  ... <account xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href="." name="foo">
  ...   <password>bar</password>
  ... </account>
  ... '''
  >>> response = http_put(account_url, xml)
  >>> response.getStatusString()
  '200 Ok'

Let's store the basic authentication string for foo::

  >>> foo = 'foo:bar'

For later usage, let's also set up a special ``admin`` account with
the ``admin`` password::

  >>> account_xml = '''
  ...   <account xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" name="admin">
  ...     <password>admin</password>
  ...   </account>
  ... '''
  >>> response = http_post(accounts_url, account_xml)

Permissions
-----------

The whole application is protected by permissions. By default
everybody has the ``write`` permission over the whole store; this is
what the ``<permission name="default" permission="write"/>`` means.

Sessions can also have restricted permissions. There are three levels
of permissions:

* ``write`` - allow read and write access (GET, POST, PUT, DELETE)

* ``read`` - read only access (GET only)

* ``none`` - no access at all

Sessions can have a ``default`` permission, which can be any of
``write``, ``read`` or ``none``.  By default sessions are open to the
public, as the global ``default`` permission is set to ``write``.

Let's demonstrate the default first by creating a session that's open
to the public::

  >>> session_xml = '''
  ...   <session xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" name="public">
  ...   </session>
  ... '''
  >>> response = http_post(sessions_url, session_xml)

The session is now present, without a permission structure (but
inheriting the global ``default`` permission of ``write``)::

 >>> response = http_get(sessions_url)
 >>> el = pretty(response)
 <sessions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
   <session href="public" name="public">
     ...
     <permissions href="public/permissions"/>
   </session>
 </sessions>

Some helper code that will help us test underlying (Zope-level) permissions::

  >>> sessions = store['sessions']
  >>> from zope.securitypolicy.interfaces import IPrincipalRoleManager
  >>> def perms(obj):
  ...    return sorted(IPrincipalRoleManager(obj).getPrincipalsAndRoles())

This session has no permissions underneath::

  >>> perms(sessions['public'])
  []
 
We'll create a session next that is read-only by default. We do this
by copying and modifying the XML of the ``public`` session::

  >>> session_el = xpath(el, 'ids:session[@name="public"]')
  >>> session_el.set('name', "readonly")
  >>> permissions_el = xpath(session_el, 'ids:permissions')
  >>> from lxml import etree
  >>> permission_el = etree.SubElement(permissions_el, 'permission', 
  ...                                  name='default', permission='read')
  >>> xml = etree.tostring(session_el, encoding='UTF-8')
  >>> response = http_post(sessions_url, xml)
  >>> response.getStatusString()
  '201 Created'

We look at this session's underlying permissions::

  >>> perms(sessions['readonly'])
  [('imagestore.Reader', 'zope.anybody', PermissionSetting: Allow)]

Let's see whether our new ``readonly`` session is indeed there::

  >>> response = http_get(sessions_url)
  >>> el = pretty(response)
  <sessions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <session href="public" name="public">
      ...
      <permissions href="public/permissions"/>
    </session>
    <session href="readonly" name="readonly">
      ...
      <permissions href="readonly/permissions">
        <permission href="readonly/permissions/default" name="default" permission="read"/>
      </permissions>
    </session>
  </sessions>

We will also create a session that's entirely closed by default from
the start::

  >>> session_el.set('name', "closed")
  >>> permission_el.set("permission", "none")
  >>> xml = etree.tostring(session_el, encoding='UTF-8')
  >>> response = http_post(sessions_url, xml)
  >>> response.getStatusString()
  '201 Created'

Let's again look at the permissions, where anonymous is explicitly
denied both the Reader and the Writer role::

  >>> perms(sessions['closed'])
  [('imagestore.Reader', 'zope.anybody', PermissionSetting: Deny), 
   ('imagestore.Writer', 'zope.anybody', PermissionSetting: Deny)]

This session cannot be accessed anonymously anymore, as anonymous
doesn't have the read permission here::

  >>> response = http_get(sessions_url + '/closed')
  Traceback (most recent call last):
    ...
  Unauthorized: ...

We cannot see it after creation either, as we are not allowed access
to that session as the anonymous user::

  >>> response = http_get(sessions_url)
  >>> el = pretty(response)
  <sessions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <session href="public" name="public">
      ...
      <permissions href="public/permissions"/>
    </session>
    <session href="readonly" name="readonly">
      ...
      <permissions href="readonly/permissions">
        <permission href="readonly/permissions/default" name="default" permission="read"/>
      </permissions>
    </session>
  </sessions>

We get the URLs for the sessions we just created (except the closed
session, which we cannot see)::

  >>> public_session_url = url_to(sessions_url, el,
  ...   'ids:session[@name="public"]/@href')
  >>> readonly_session_url = url_to(sessions_url, el,
  ...   'ids:session[@name="readonly"]/@href')

We also get the particular permission URLs::

  >>> public_permissions_url = url_to(sessions_url, el,
  ...   'ids:session[@name="public"]/ids:permissions/@href')
  >>> readonly_permissions_url = url_to(sessions_url, el,
  ...   'ids:session[@name="readonly"]/ids:permissions/@href')

An admin account
----------------

So far the global ``write`` permission for ``default`` should still
allow us to add permissions everywhere. Only one session gets us in
trouble, namely ``closed``, as this withdraws the default ``write``
permission explicitly.

Let's now hand out our first new permission for a user. We give the
``write`` permission to a special ``admin`` account. This permission
is assigned globally, so we can then use this account safely to
manipulate any content we want in the entire store::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="admin" permission="write" />
  ... """
  >>> response = http_post(permissions_url, xml)
  >>> response.getStatusString()
  '201 Created'

The permission should now be there::

  >>> perms(store)
  [('imagestore.Writer', u'admin', PermissionSetting: Allow), 
   ('imagestore.Writer', 'zope.anybody', PermissionSetting: Allow)]

We can log in using basic authentication using the following
username/password string::

  >>> admin = 'admin:admin'

The closed session should now show up when we access all sessions using
this login::

  >>> response = http_get(sessions_url, basic=admin)
  >>> el = pretty(response)
  <sessions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <session href="closed" name="closed">
      ...
      <permissions href="closed/permissions">
        <permission href="closed/permissions/default" name="default" permission="none"/>
      </permissions>
    </session>
    <session href="public" name="public">
      ...
      <permissions href="public/permissions"/>
    </session>
    <session href="readonly" name="readonly">
      ...
      <permissions href="readonly/permissions">
        <permission href="readonly/permissions/default" name="default" permission="read"/>
      </permissions>
    </session>
  </sessions>

Let's get the URLs to the closed session and its permissions::

  >>> closed_session_url = url_to(sessions_url, el,
  ...   'ids:session[@name="closed"]/@href')

  >>> closed_permissions_url = url_to(sessions_url, el,
  ...   'ids:session[@name="closed"]/ids:permissions/@href')

We now use this admin account to access or manipulate anything we
like. We can for instance look at the ``closed`` session::

  >>> response = http_get(closed_session_url, basic=admin)
  >>> response.getStatusString()
  '200 Ok'

We can't do this even if we know the URL if we're the anonymous user::

  >>> response = http_get(closed_session_url)
  Traceback (most recent call last):
    ...
  Unauthorized: ...

Since we now have this admin permission, we can remove the global
default permission of ``write``::

  >>> response = http_get(permissions_url)
  >>> permissions_el = pretty(response)
  <permissions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <permission href="admin" name="admin" permission="write"/>
    <permission href="default" name="default" permission="write"/>
  </permissions>

  >>> app_default_permission_url = url_to(permissions_url, 
  ...   permissions_el, 'ids:permission[@name="default"]/@href')
  >>> response = http_delete(app_default_permission_url)
  >>> response.getStatusString()
  '200 Ok'

The ``public`` account is actually not public anymore, as the global
``default`` doesn't have the ``write`` permission anymore. Let's instead
give ``default`` the ``write`` permission in ``public``::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="default" permission="write" />
  ... """
  >>> response = http_post(public_permissions_url, xml, basic=admin)
  >>> perms(sessions['public'])
  [('imagestore.Writer', 'zope.anybody', PermissionSetting: Allow)]

After this, only ``admin`` has the global write permission::

  >>> response = http_get(permissions_url, basic=admin)
  >>> permissions_el = pretty(response)
  <permissions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <permission href="admin" name="admin" permission="write"/>
  </permissions>

The underlying permission for ``zope.anybody`` is also gone::

  >>> perms(store)
  [('imagestore.Writer', u'admin', PermissionSetting: Allow)]

The anonymous user can still access those sessions that are public
by default, namely::

  >>> response = http_get(public_session_url)
  >>> response.getStatusString()
  '200 Ok'
  >>> response = http_get(readonly_session_url)
  >>> response.getStatusString()
  '200 Ok'

But we cannot access the closed session anymore::

  >>> response = http_get(closed_session_url)
  Traceback (innermost last):
    ...
  Unauthorized: ...

Giving out permissions
----------------------

Let's give a ``write`` permission to the account ``foo`` in session
``readonly``::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="foo" permission="write" />
  ... """
  >>> response = http_post(readonly_permissions_url, xml, basic=admin)
  >>> response.getStatusString()
  '201 Created'

Let's confirm that the permission is now indeed there::

  >>> response = http_get(readonly_permissions_url)
  >>> el = pretty(response)
  <permissions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <permission href="default" name="default" permission="read"/>
    <permission href="foo" name="foo" permission="write"/>
  </permissions>

Let's also check whether ``foo`` indeed can write here now::

  >>> perms(sessions['readonly'])
  [('imagestore.Reader', 'zope.anybody', PermissionSetting: Allow), 
   ('imagestore.Writer', u'foo', PermissionSetting: Allow)]

Anonymous can't POST::

  >>> readonly_images_url = readonly_session_url + '/images'
  >>> data = image_data('test1.jpg')
  >>> response = http_post(readonly_images_url, data, 
  ...                      Slug='alpha.jpg')
  Traceback (most recent call last):
    ...
  Unauthorized: ...

But ``foo`` can::

  >>> response = http_post(readonly_images_url, data, 
  ...                      Slug='alpha.jpg', basic=foo)
  >>> response.getStatusString()
  '201 Created'

Anonymous can't PUT either::

  >>> response = http_put(readonly_images_url + '/alpha.jpg',
  ...                     data)
  Traceback (most recent call last):
    ...
  Unauthorized: ...

Put ``foo`` can::

  >>> response = http_put(readonly_images_url + '/alpha.jpg',
  ...                     data, basic=foo)
  >>> response.getStatusString()
  '200 Ok'

We'll also give the ``read`` permission to the account ``foo`` in session
``closed``::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="foo" permission="read" />
  ... """
  >>> response = http_post(closed_permissions_url, xml, basic=admin)
  >>> response.getStatusString()
  '201 Created'

Let's confirm ``foo`` is allowed to read here::

  >>> perms(sessions['closed'])
  [('imagestore.Reader', u'foo', PermissionSetting: Allow), 
   ('imagestore.Reader', 'zope.anybody', PermissionSetting: Deny), 
   ('imagestore.Writer', 'zope.anybody', PermissionSetting: Deny)]

``foo`` can indeed GET::

  >>> response = http_get(closed_session_url, basic=foo)
  >>> response.getStatusString()
  '200 Ok'

But anonymous can't::

  >>> response = http_get(closed_session_url)
  Traceback (most recent call last):
    ...
  Unauthorized: ...

We cannot assign permissions for accounts that do not exist::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="doesnotexist" permission="read" />
  ... """
  >>> response = http_post(closed_permissions_url, xml, basic=admin)
  >>> response.getStatusString()
  '400 Bad Request'

We also cannot assign the same permission twice::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="foo" permission="read" />
  ... """
  >>> response = http_post(closed_permissions_url, xml, basic=admin)
  >>> response.getStatusString()
  '409 Conflict'

Let's give ``foo`` the ``write`` permission in ``public`` (a redundant
operation, we can still do it)::

  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="foo" permission="write" />
  ... """
  >>> response = http_post(public_permissions_url, xml)
  >>> response.getStatusString()
  '201 Created'
  >>> response = http_get(public_permissions_url)
  >>> el = pretty(response)
  <permissions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <permission href="default" name="default" permission="write"/>
    <permission href="foo" name="foo" permission="write"/>
  </permissions>

  >>> perms(sessions['public'])
  [('imagestore.Writer', u'foo', PermissionSetting: Allow), 
   ('imagestore.Writer', 'zope.anybody', PermissionSetting: Allow)]

Let's change this permission for ``foo`` to a ``read`` permission::

  >>> permission_url = url_to(public_permissions_url, el, 'ids:permission[@name="foo"]/@href')
  >>> xml = """
  ...   <permission xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" 
  ...               name="foo" permission="read" />
  ... """
  >>> response = http_put(permission_url, xml)
  >>> response.getStatusString()
  '200 Ok'
  >>> response = http_get(public_permissions_url)
  >>> el = pretty(response)
  <permissions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <permission href="default" name="default" permission="write"/>
    <permission href="foo" name="foo" permission="read"/>
  </permissions>

This change is reflected in the underlying permissions::

  >>> perms(sessions['public'])
  [('imagestore.Reader', u'foo', PermissionSetting: Allow), 
   ('imagestore.Writer', 'zope.anybody', PermissionSetting: Allow)]

We can remove this permission again by a DELETE operation::

  >>> response = http_delete(permission_url)
  >>> response = http_get(public_permissions_url)
  >>> el = pretty(response)
  <permissions xmlns="http://studiolab.io.tudelft.nl/ns/imagestore" href=".">
    <permission href="default" name="default" permission="write"/>
  </permissions>

This change is reflected in the underlying permissions::

  >>> perms(sessions['public'])
  [('imagestore.Writer', 'zope.anybody', PermissionSetting: Allow)]

Changing passwords
------------------

